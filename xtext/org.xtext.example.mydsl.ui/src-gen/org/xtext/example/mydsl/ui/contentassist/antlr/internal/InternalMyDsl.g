/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getQuestionsAssignment()); }
(rule__Model__QuestionsAssignment)*
{ after(grammarAccess.getModelAccess().getQuestionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuestion
entryRuleQuestion 
:
{ before(grammarAccess.getQuestionRule()); }
	 ruleQuestion
{ after(grammarAccess.getQuestionRule()); } 
	 EOF 
;

// Rule Question
ruleQuestion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuestionAccess().getGroup()); }
(rule__Question__Group__0)
{ after(grammarAccess.getQuestionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnswer
entryRuleAnswer 
:
{ before(grammarAccess.getAnswerRule()); }
	 ruleAnswer
{ after(grammarAccess.getAnswerRule()); } 
	 EOF 
;

// Rule Answer
ruleAnswer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnswerAccess().getGroup()); }
(rule__Answer__Group__0)
{ after(grammarAccess.getAnswerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLOGIC
entryRuleLOGIC 
:
{ before(grammarAccess.getLOGICRule()); }
	 ruleLOGIC
{ after(grammarAccess.getLOGICRule()); } 
	 EOF 
;

// Rule LOGIC
ruleLOGIC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLOGICAccess().getAlternatives()); }
(rule__LOGIC__Alternatives)
{ after(grammarAccess.getLOGICAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__LOGIC__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLOGICAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getLOGICAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getLOGICAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getLOGICAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Question__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__0__Impl
	rule__Question__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getQuestionAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__1__Impl
	rule__Question__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getQuestionAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__2__Impl
	rule__Question__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getNameAssignment_2()); }
(rule__Question__NameAssignment_2)
{ after(grammarAccess.getQuestionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__3__Impl
	rule__Question__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__4__Impl
	rule__Question__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
(rule__Question__AnswersAssignment_4)
{ after(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
)
(
{ before(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
(rule__Question__AnswersAssignment_4)*
{ after(grammarAccess.getQuestionAccess().getAnswersAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Question__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Question__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Question__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Answer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Answer__Group__0__Impl
	rule__Answer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getLogicAssignment_0()); }
(rule__Answer__LogicAssignment_0)
{ after(grammarAccess.getAnswerAccess().getLogicAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Answer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Answer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getNameAssignment_1()); }
(rule__Answer__NameAssignment_1)
{ after(grammarAccess.getAnswerAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__QuestionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getQuestionsQuestionParserRuleCall_0()); }
	ruleQuestion{ after(grammarAccess.getModelAccess().getQuestionsQuestionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Question__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getQuestionAccess().getNameSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Question__AnswersAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuestionAccess().getAnswersAnswerParserRuleCall_4_0()); }
	ruleAnswer{ after(grammarAccess.getQuestionAccess().getAnswersAnswerParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__LogicAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getLogicLOGICParserRuleCall_0_0()); }
	ruleLOGIC{ after(grammarAccess.getAnswerAccess().getLogicLOGICParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAnswerAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


